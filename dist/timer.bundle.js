(()=>{"use strict";var e={409:(e,t,r)=>{r.d(t,{xN:()=>s,RL:()=>i,RK:()=>a});var n=r(594),o=r(771);function s(){var e=!1;null===a(n.Rd)&&(e=!0),null===a(n.oi)&&(e=!0),null===!localStorage.getItem(o.Do)&&(e=!0),null===!localStorage.getItem(o.mn)&&(e=!0),null===a(o.XB)&&(e=!0),e&&(i(n.Rd,{}),i(n.oi,0),i(o.mn,"complete"),i(o.Do,0),i(o.XB,{}))}function i(e,t){localStorage.setItem(e,JSON.stringify(t))}function a(e){return JSON.parse(localStorage.getItem(e))}},771:(e,t,r)=>{r.d(t,{Do:()=>l,mn:()=>c,XB:()=>u,rA:()=>d,Nt:()=>m,_c:()=>p,E3:()=>f,qc:()=>h,yJ:()=>v,RU:()=>y,hY:()=>k});var n=r(409),o=r(594);function s(e,t){var r;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?i(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,l=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return a=e.done,e},e:function(e){l=!0,s=e},f:function(){try{a||null==r.return||r.return()}finally{if(l)throw s}}}}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l="pomo_session_id",c="latest_pomo_session_status",u="pomo_session_map",d={INACTIVE:"inactive",BREAK:"break",LONG_BREAK:"longbreak",ACTIVE:"active",COMPLETE:"complete"},m=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id=t,this.allTasks=[],this.mode=d.INACTIVE,this.time=0,this.pomosElapsed=0,this.startDate=new Date}var t,r;return t=e,(r=[{key:"currentTask",value:function(){var e=this.allTasks.filter((function(e){return!e.completed}));return e.length>0?e[0]:null}},{key:"addTask",value:function(e){(0,o.rs)(e),this.allTasks.push(e)}},{key:"deleteTask",value:function(e){(0,o.c_)(e.id);for(var t=0;t<this.allTasks.length;t++){var r=this.allTasks[t];if(e.id===r.id)return void this.allTasks.splice(t,1)}}},{key:"completeTask",value:function(e){var t,r=s(this.allTasks);try{for(r.s();!(t=r.n()).done;){var n=t.value;if(n.id===e)return n.completed=!0,!0}}catch(e){r.e(e)}finally{r.f()}return!1}},{key:"getNextTask",value:function(){var e,t=s(this.allTasks);try{for(t.s();!(e=t.n()).done;){var r=e.value;if(!1===r.completed)return r}}catch(e){t.e(e)}finally{t.f()}return null}},{key:"incrementTaskPomosUsed",value:function(e){var t,r=s(this.allTasks);try{for(r.s();!(t=r.n()).done;){var n=t.value;if(n.id===e)return n.pomosUsed+=1,void(this.pomosElapsed+=1)}}catch(e){r.e(e)}finally{r.f()}}},{key:"isBreak",value:function(){return this.mode===d.LONG_BREAK||this.mode===d.BREAK}},{key:"reorderTasks",value:function(){}},{key:"getPomosLeftInSession",value:function(){var e=0;return this.allTasks.forEach((function(t){e+=Math.max(t.pomosRequired-t.pomosUsed,0)})),e}},{key:"parseSessionFromObj",value:function(e){return this.id=e.id,this.mode=e.mode,this.time=e.time,this.pomosElapsed=e.pomosElapsed,this.startDate=new Date(e.startDate),this.allTasks=e.allTasks.map((function(e){var t=new o.iQ;return t.parseTaskFromObj(e)})),this}},{key:"serializeIntoObj",value:function(){return{id:this.id,allTasks:this.allTasks.map((function(e){return e.serializeIntoObj()})),mode:this.mode,time:this.time,pomosElapsed:this.pomosElapsed,startDate:this.startDate.getTime()}}}])&&a(t.prototype,r),e}();function p(e){var t=(0,n.RK)(u),r=new m;return t[e]?r.parseSessionFromObj(t[e]):null}function f(e){var t=(0,n.RK)(u);t[e.id]=e.serializeIntoObj(),(0,n.RL)(u,t)}function h(){var e=parseInt(localStorage.getItem(l));return localStorage.setItem(l,e+1),e}function v(e){localStorage.setItem(c,e)}function y(){return"complete"===localStorage.getItem(c)?null:parseInt(localStorage.getItem(l))-1}function k(){var e=y();if(null===e)return!1;var t=p(e);return null!==t&&t.mode!==d.COMPLETE&&t.mode!==d.INACTIVE}},594:(e,t,r)=>{r.d(t,{iQ:()=>i,Rd:()=>a,oi:()=>l,rs:()=>c,c_:()=>u,zT:()=>d});var n=r(409),o=r(771);function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=function(){function e(t,r,n,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sessionID=t,this.id=-1,this.title=r,this.description=n,this.pomosRequired=o,this.completed=!1,this.pomosUsed=0}var t,r;return t=e,(r=[{key:"parseTaskFromObj",value:function(t){var r=new e(t.sessionID,t.title,t.description,t.pomosRequired);return r.completed=t.completed,r.id=t.id,r.pomosUsed=t.pomosUsed,r}},{key:"serializeIntoObj",value:function(){return{title:this.title,description:this.description,pomosRequired:this.pomosRequired,completed:this.completed,pomosUsed:this.pomosUsed,id:this.id,sessionID:this.sessionID}}}])&&s(t.prototype,r),e}(),a="pomo_task_map",l="pomo_task_index";function c(e){var t=(0,n.RK)(a);if(!t[e.id]){var r=parseInt((0,n.RK)(l));e.id=r,(0,n.RL)(l,r+1)}var o=e.serializeIntoObj();return t[e.id]=o,(0,n.RL)(a,t),e.id}function u(e){var t=(0,n.RK)(a);delete t[e],(0,n.RL)(a,t)}function d(){var e=(0,o.RU)();if(null===e)return!1;var t=(0,o._c)(e);return null!==t&&null!==t.currentTask()}}},t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={exports:{}};return e[n](o,o.exports,r),o.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{function e(e){var t,r=e%60;t=r<10?"0"+r:r;var n=Math.floor(e/60);return(n<10?"0"+n:n)+":"+t}var t=r(409),n=r(771),o=r(594),s="day",i="night";function a(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date,t=s;return e.getHours()<4?t=i:e.getHours()<18?t=s:e.getHours()<24&&(t=i),t}function l(e,t){var r;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return c(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?c(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,i=!0,a=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return i=e.done,e},e:function(e){a=!0,s=e},f:function(){try{i||null==r.return||r.return()}finally{if(a)throw s}}}}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}window.addEventListener("DOMContentLoaded",(function(){!function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date,t=0,r=6,n=e.getDay(),o=localStorage.getItem("bg-seed");null!==o&&o[0]==n||(o=n+"-"+Math.floor(Math.random()*r),localStorage.setItem("bg-seed",o));var s=a(e);t=parseInt(o[2]),document.getElementById("backdrop").style.backgroundImage='url("../assets/images/backgrounds/'.concat(s,"/bg").concat(t,'.jpg")')}();var r=new URLSearchParams(window.location.search),s=r.get("loadSaved"),i=document.getElementById("taskCreator"),c=document.getElementById("addTaskModal"),u=document.getElementById("taskList"),d=document.getElementById("startTimer"),m=document.getElementById("currentTask"),p=document.getElementById("taskList"),f=document.getElementById("timer-progress"),h=document.getElementById("distractedWrapper"),v=document.getElementById("completeSession"),y=document.getElementById("EndBreakEarlyWrapper");v.onclick=function(){g.mode=n.rA.COMPLETE,(0,n.E3)(g)};var k=1500;if((0,t.xN)(),"false"!=s||!(0,o.zT)()||confirm("By starting a new timer, you will lose any unfinished tasks from your previous session")){var g=null;if("true"==s){var T=(0,n.RU)();if(g=(0,n._c)(T),(0,n.hY)()&&g.mode!=n.rA.INACTIVE)O(),A();else{var E=(0,n.qc)();(0,n.yJ)("in-progress");var b=g.allTasks;b.forEach((function(e){e.sessionID=E,(0,o.rs)(e)})),(g=new n.Nt(E)).time=k,g.allTasks=b,(0,n.E3)(g),O()}}else if("false"==s){var I=(0,n.qc)();(0,n.yJ)("in-progress"),(g=new n.Nt(I)).time=k,(0,n.E3)(g),O()}r.set("loadSaved",!0),f.setDisplayText(e(g.time)),f.setPercentage(g.time/k),g.mode===n.rA.BREAK?(B(),f.setPercentage(g.time/300)):g.mode===n.rA.LONG_BREAK&&(B(),f.setPercentage(g.time/SVGFEColorMatrixElement)),y.onclick=function(){w(),g.time=k,g.mode=n.rA.ACTIVE},d.onclick=A,c.shadowRoot.getElementById("save-btn").addEventListener("click",(function(){var e,t,r,s=c.elements.values;if(null!=s){var i=(0,n.RU)(),a=new o.iQ(i,s.taskName,s.description,parseInt(s.pomosRequired));R(a),g.addTask(a),(0,n.E3)(g),e=c.shadowRoot.getElementById("task-name").elements.wrapper,t=c.shadowRoot.getElementById("pomos-required").elements.wrapper,r=c.shadowRoot.getElementById("description").elements.wrapper,e.innerText=e.placeholder,e.userTyped=void 0,e.setAttribute("class","pomo-input placeholder"),t.innerText=t.placeholder,t.userTyped=void 0,t.setAttribute("class","pomo-input placeholder"),r.innerText=r.placeholder,r.userTyped=void 0,r.setAttribute("class","pomo-input placeholder"),c.elements.values=void 0}})),i.onclick=function(){c.displayModal()}}else window.location="./index.html";function A(){m.setAttribute("class","currentTaskWorkTime"),f.setSize("1.5rem"),u.setAttribute("class","taskListWorkTime"),document.getElementById("timerWrapper").setAttribute("class","timerWrapperWorkTime"),h.style.display="block",document.getElementById("completeSessionWrapper").setAttribute("class","completeSessionWrapperWorkTime"),document.getElementById("taskCreatorWrapper").style.display="none",document.getElementById("currentTaskWrapper").style.display="block",S(),g.mode===n.rA.INACTIVE&&(g.mode=n.rA.ACTIVE,(0,n.E3)(g)),setInterval((function(){if((g=(0,n._c)(g.id)).time-=1,g.time<0&&(g.time=0),0==g.time)if(g.mode===n.rA.ACTIVE){B(),g.pomosElapsed+=1;var t=m.childNodes[0];t.incrementPomosUsed(),t.task.pomosUsed+=1,t.setAttribute("pomosused",1+parseInt(t.getAttribute("pomosused"))),g.pomosElapsed%4==0?(g.time=600,g.mode=n.rA.LONG_BREAK):(g.time=300,g.mode=n.rA.BREAK)}else g.mode!==n.rA.COMPLETE&&(w(),g.time=k,g.mode=n.rA.ACTIVE);document.title=e(g.time),f.setDisplayText(e(g.time)),g.mode===n.rA.ACTIVE?(f.setPercentage(g.time/k),document.title+=" - Work"):g.mode===n.rA.BREAK?(f.setPercentage(g.time/300),document.title+=" - Break"):g.mode===n.rA.LONG_BREAK&&(f.setPercentage(g.time/600),document.title+=" - Long Break"),(0,n.E3)(g)}),1e3);var t=m.childNodes[0];t.setFinishTaskCallback((function(){N(),S()}));var r=g.currentTask();t.task=r}function w(){document.getElementById("timer-status").innerText="Pomo Time",m.setAttribute("class","currentTaskWorkTime"),p.setAttribute("class","taskListWorkTime"),h.style.display="block",y.style.display="none",timerWrapper.setAttribute("class","timerWrapperWorkTime"),completeSessionWrapper.setAttribute("class","completeSessionWrapperWorkTime")}function B(){m.setAttribute("class","currentTaskBreakTime"),p.setAttribute("class","taskListBreakTime"),document.getElementById("timer-status").innerText="Break Time",y.style.display="block",h.style.display="none",timerWrapper.setAttribute("class","timerWrapperBreakTime"),completeSessionWrapper.setAttribute("class","completeSessionWrapperBreakTime")}function R(e){var t='<pomo-task description ="'.concat(e.description,'" pomosUsed="').concat(e.pomosUsed,'", pomosRequired ="').concat(e.pomosRequired,'">').concat(e.title,"</pomo-task>");u.insertAdjacentHTML("beforeend",t);var r=u.childNodes[u.childNodes.length-1];r.setFinishTaskCallback((function(){N()})),r.task=e}function S(){p.childNodes[0];var e=g.getNextTask();if(null===e)return g.mode=n.rA.COMPLETE,(0,n.E3)(g),void(window.location="./history.html");var t='<pomo-task description="'.concat(e.description,'" pomosUsed="').concat(e.pomosUsed,'" pomosRequired=').concat(e.pomosRequired,">").concat(e.title,"</pomo-task>");m.insertAdjacentHTML("beforeend",t),p.removeChild(p.childNodes[0]),m.childNodes[m.childNodes.length-1].setFinishTaskCallback((function(){N(),S()})),m.childNodes[m.childNodes.length-1].task=e}function N(){var e,t=[],r=l(m.childNodes);try{var o=function(){var r=e.value;r.completed&&(t.push(r.task.id),r.hide(),setTimeout((function(){m.removeChild(r)}),200))};for(r.s();!(e=r.n()).done;)o()}catch(e){r.e(e)}finally{r.f()}var s,i=l(p.childNodes);try{var a=function(){var e=s.value;e.completed&&(t.push(e.task.id),e.hide(),setTimeout((function(){p.removeChild(e)}),200))};for(i.s();!(s=i.n()).done;)a()}catch(e){i.e(e)}finally{i.f()}t.forEach((function(e){g.completeTask(e)})),(0,n.E3)(g)}function O(){var e=(0,n.RU)(),t=[];if(null!==e){var r=g.allTasks;Object.values(r).forEach((function(r){console.log(r),r.sessionID!==e||r.completed||t.push(r)})),t.forEach((function(e){R(e)}))}var o,s=l(p.childNodes);try{for(s.s();!(o=s.n()).done;)o.value.setFinishTaskCallback((function(){N()}))}catch(e){s.e(e)}finally{s.f()}}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,