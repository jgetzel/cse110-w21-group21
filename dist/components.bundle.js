(()=>{var t={614:()=>{function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function e(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function n(e,n){return!n||"object"!==t(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(e):n}function r(t){var e="function"==typeof Map?new Map:void 0;return(r=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf("[native code]")))return t;var n;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return o(t,arguments,a(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),s(r,t)})(t)}function o(t,e,n){return(o=i()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var o=new(Function.bind.apply(t,r));return n&&s(o,n.prototype),o}).apply(null,arguments)}function i(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var u=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(p,t);var r,o,u,c,l=(r=p,o=i(),function(){var t,e=a(r);if(o){var i=a(this).constructor;t=Reflect.construct(e,arguments,i)}else t=e.apply(this,arguments);return n(this,t)});function p(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,p),(t=l.call(this)).userTyped="",t.elements={},t.attachShadow({mode:"open"});var e=document.createElement("div");e.setAttribute("class","pomo-input"),e.placeholder="Default Text",e.contentEditable=!0,e.max=50,t.elements.wrapper=e;var n=document.createElement("link");return n.setAttribute("rel","stylesheet"),n.setAttribute("href","./assets/styles/input-field.css"),t.elements.linkElem=n,t.shadowRoot.append(n,e),t.elements.wrapper.setAttribute("class",t.elements.wrapper.getAttribute("class")+" placeholder"),e.addEventListener("focus",(function(){this.userTyped||(e.setAttribute("class","pomo-input"),e.textContent="")})),e.addEventListener("blur",(function(){this.userTyped||(e.setAttribute("class","pomo-input placeholder"),e.textContent=e.placeholder)})),t}return u=p,(c=[{key:"limitCharCount",value:function(t){return this.userTyped=this.textContent,0==window.getSelection().toString().length&&this.textContent.length>=this.max?(this.setAttribute("class","pomo-input max"),t.preventDefault(),!1):(this.setAttribute("class","pomo-input"),!0)}},{key:"numericInputOnly",value:function(t){if(this.userTyped=this.textContent,0==window.getSelection().toString().length&&this.textContent.length>=this.max)return this.setAttribute("class","pomo-input max"),t.preventDefault(),!1;this.setAttribute("class","pomo-input"),"keypress"==t.type&&isNaN(t.key)?(this.classList.add("invalid"),t.preventDefault()):("input"==t.type&&isNaN(t.data)||"paste"==t.type&&isNaN(t.clipboardData.getData("Text")))&&(this.setAttribute("class","pomo-input invalid"),t.preventDefault())}},{key:"value",get:function(){return this.userTyped}},{key:"connectedCallback",value:function(){var t=this.getAttribute("max");null!=t&&(this.elements.wrapper.max=Number(t)),this.elements.wrapper.textContent=this.textContent,this.getAttribute("required")&&(this.required=!0,this.elements.wrapper.textContent+="*"),"number"==this.getAttribute("type")?(this.elements.wrapper.addEventListener("keypress",this.numericInputOnly,!1),this.elements.wrapper.addEventListener("paste",this.numericInputOnly,!1),this.elements.wrapper.addEventListener("input",this.numericInputOnly,!1)):(this.elements.wrapper.addEventListener("keypress",this.limitCharCount,!1),this.elements.wrapper.addEventListener("paste",this.limitCharCount,!1),this.elements.wrapper.addEventListener("input",this.limitCharCount,!1)),this.elements.wrapper.placeholder=this.elements.wrapper.textContent}}])&&e(u.prototype,c),p}(r(HTMLElement));customElements.define("pomo-input",u)},223:()=>{function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function e(e,n){return!n||"object"!==t(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(e):n}function n(t){var e="function"==typeof Map?new Map:void 0;return(n=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf("[native code]")))return t;var n;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,o)}function o(){return r(t,arguments,s(this).constructor)}return o.prototype=Object.create(t.prototype,{constructor:{value:o,enumerable:!1,writable:!0,configurable:!0}}),i(o,t)})(t)}function r(t,e,n){return(r=o()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var o=new(Function.bind.apply(t,r));return n&&i(o,n.prototype),o}).apply(null,arguments)}function o(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function i(t,e){return(i=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function s(t){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var a=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&i(t,e)}(u,t);var n,r,a=(n=u,r=o(),function(){var t,o=s(n);if(r){var i=s(this).constructor;t=Reflect.construct(o,arguments,i)}else t=o.apply(this,arguments);return e(this,t)});function u(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),t=a.call(this);var e=document.getElementById("addTaskModal");return e.shadowRoot.getElementById("modal-close").onclick=function(){var t,n,r;e.hideModal(),t=e.shadowRoot.getElementById("task-name").elements.wrapper,n=e.shadowRoot.getElementById("pomos-required").elements.wrapper,r=e.shadowRoot.getElementById("description").elements.wrapper,t.innerText=t.placeholder,t.userTyped=void 0,t.setAttribute("class","pomo-input placeholder"),n.innerText=n.placeholder,n.userTyped=void 0,n.setAttribute("class","pomo-input placeholder"),r.innerText=r.placeholder,r.userTyped=void 0,r.setAttribute("class","pomo-input placeholder"),e.elements.values=void 0},e.elements.saveBtn=e.shadowRoot.getElementById("save-btn"),e.elements.saveBtn.onclick=function(){var t,n,r;t=!0,n=e.shadowRoot.getElementById("task-name").elements.wrapper,r=e.shadowRoot.getElementById("pomos-required").elements.wrapper,null==n.userTyped&&(n.setAttribute("class","pomo-input invalid"),t=!1),null==r.userTyped&&(r.setAttribute("class","pomo-input invalid"),t=!1),t&&(e.hideModal(),e.elements.values=function(){var t=e.shadowRoot.getElementById("task-name").elements.wrapper,n=e.shadowRoot.getElementById("pomos-required").elements.wrapper,r=e.shadowRoot.getElementById("description").elements.wrapper,o={taskName:t.userTyped,pomosRequired:n.userTyped,description:""};return null!=r.userTyped&&(o.description=r.userTyped),o}())}.bind(e),t}return u}(n(HTMLElement));customElements.define("modal-input",a)},870:()=>{function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function e(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function n(e,n){return!n||"object"!==t(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(e):n}function r(t){var e="function"==typeof Map?new Map:void 0;return(r=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf("[native code]")))return t;var n;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return o(t,arguments,a(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),s(r,t)})(t)}function o(t,e,n){return(o=i()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var o=new(Function.bind.apply(t,r));return n&&s(o,n.prototype),o}).apply(null,arguments)}function i(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var u=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(p,t);var r,o,u,c,l=(r=p,o=i(),function(){var t,e=a(r);if(o){var i=a(this).constructor;t=Reflect.construct(e,arguments,i)}else t=e.apply(this,arguments);return n(this,t)});function p(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,p),(t=l.call(this)).elements={},t.attachShadow({mode:"open"});var e=document.createElement("div");e.setAttribute("id","wrapper"),t.elements.wrapper=e,t.displayText="0%",e.innerHTML='\n        <div id="progress-circle" class="progress-circle">\n            <span id="displayText">\n                0%\n            </span>\n            <div class="left-half-clipper">\n                <div class="first50-bar"></div>\n                <div class="value-bar" id="progress-bar"></div>\n            </div>\n        </div>\n        ',e.innerHTML='\n        <span id="displayText">0%</span>\n        <svg id="circular-loader"viewBox="25 25 50 50" >\n            <circle id="loader-path" cx="50" cy="50" r="20" fill="none" />\n            <circle id="loader-path-bg" cx="50" cy="50" r="20" fill="none" />\n        </svg>\n        ';var n=document.createElement("link");return n.setAttribute("rel","stylesheet"),n.setAttribute("href","./assets/styles/progress-circle.css"),t.elements.linkElem=n,t.shadowRoot.append(n,e),t}return u=p,(c=[{key:"setSize",value:function(t){this.shadowRoot.getElementById("wrapper").style.fontSize=t}},{key:"setDisplayText",value:function(t){this.displayText=t,this.shadowRoot.getElementById("displayText").textContent=t}},{key:"setPercentage",value:function(t){this.shadowRoot.getElementById("loader-path").style.strokeDashoffset=127.5*-(1-t)}}])&&e(u.prototype,c),p}(r(HTMLElement));customElements.define("progress-circle",u)},907:()=>{function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function e(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function n(e,n){return!n||"object"!==t(n)&&"function"!=typeof n?r(e):n}function r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function o(t){var e="function"==typeof Map?new Map:void 0;return(o=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf("[native code]")))return t;var n;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return i(t,arguments,u(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),a(r,t)})(t)}function i(t,e,n){return(i=s()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var o=new(Function.bind.apply(t,r));return n&&a(o,n.prototype),o}).apply(null,arguments)}function s(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function a(t,e){return(a=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function u(t){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var c=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&a(t,e)}(d,t);var o,i,c,p,f=(o=d,i=s(),function(){var t,e=u(o);if(i){var r=u(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return n(this,t)});function d(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,d),(t=f.call(this)).elements={},t.attachShadow({mode:"open"});var e=r(t);e.isCurrentTask=!0,e.completed=!1;var n=document.createElement("div"),o=document.createElement("li");o.setAttribute("class","task"),n.appendChild(o);var i=document.createElement("div");i.setAttribute("class","textwrapper"),o.appendChild(i);var s=document.createElement("p");s.setAttribute("class","title"),s.innerText=t.textContent||"",t.elements.title=s,i.appendChild(s);var a=document.createElement("p");a.setAttribute("class","description"),a.innerText=t.getAttribute("description")||"",t.elements.description=a,i.appendChild(a);var u=document.createElement("div");u.setAttribute("class","wrapperCircle"),o.appendChild(u);var c=document.createElement("div");c.setAttribute("class","pomoCircle"),t.pomosUsed=parseInt(t.getAttribute("pomosUsed")),c.preq=t.getAttribute("pomosRequired"),c.innerText=t.getAttribute("pomosUsed")+"/"+t.getAttribute("pomosRequired"),t.elements.pomoCircle=c,u.appendChild(c),o.appendChild(u);var p=document.createElement("div");p.setAttribute("class","wrapperCheckMark"),o.appendChild(p);var m=document.createElement("img");1==t.completed?(m.setAttribute("class","completeCheckMark"),m.setAttribute("src","./assets/svgImages/check_Complete.svg")):(m.setAttribute("class","incompleteCheckMark"),m.setAttribute("src","./assets/svgImages/check_Incomplete.svg")),m.onclick=function(){m.setAttribute("class","completeCheckMark"),m.setAttribute("src","./assets/svgImages/check_Complete.svg"),e.completed=!0,e.isCurrentTask=!1,l(c,e)},p.appendChild(m),t.elements.checkMark=m;var y=document.createElement("div");y.setAttribute("class","wrapperDragAndDrop"),o.appendChild(y);var h=document.createElement("img");h.setAttribute("class","dragAndDrop"),h.setAttribute("src","./assets/svgImages/drag-dots.svg"),y.appendChild(h),t.elements.dragAndDrop=h,t.elements.wrapper=o;var b=document.createElement("link");return b.setAttribute("rel","stylesheet"),b.setAttribute("href","./assets/styles/task.css"),t.elements.linkElem=b,t.shadowRoot.append(n,b),t}return c=d,(p=[{key:"pomosused",set:function(t){console.log("HELLO")}},{key:"attributeChangedCallback",value:function(t,e,n){console.log(t,e,n),"pomosused"===t&&(console.log(n),this.elements.pomoCircle.innerText=n+"/"+this.getAttribute("pomosRequired"))}},{key:"setFinishTaskCallback",value:function(t){var e=this.elements.checkMark,n=this;e.onclick=function(){e.setAttribute("class","completeCheckMark"),e.setAttribute("src","./assets/svgImages/check_Complete.svg"),n.completed=!0,n.isCurrentTask=!1,l(n.elements.pomoCircle,n),t()}}},{key:"incrementPomosUsed",value:function(){this.pomosUsed+=1,this.elements.pomoCircle.innerText=this.pomosUsed+"/"+this.getAttribute("pomosRequired")}},{key:"hide",value:function(){this.elements.wrapper.style.opacity=0}}])&&e(c.prototype,p),d}(o(HTMLElement));function l(t,e){!0===e.isCurrentTask?t.setAttribute("class","currentTask"):!0===e.completed?e.pomosUsed<=t.preq?t.setAttribute("class","goodTimingTask"):t.setAttribute("class","badTimingTask"):e.completed||t.setAttribute("class","incompleteTask")}customElements.define("pomo-task",c)},409:(t,e,n)=>{"use strict";function r(t,e){localStorage.setItem(t,JSON.stringify(e))}function o(t){return JSON.parse(localStorage.getItem(t))}n.d(e,{RL:()=>r,RK:()=>o}),n(594),n(771)},771:(t,e,n)=>{"use strict";n.d(e,{rA:()=>c,_c:()=>p,E3:()=>f,RU:()=>d});var r=n(409),o=n(594);function i(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return s(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){u=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(u)throw i}}}}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var u="pomo_session_map",c={INACTIVE:"inactive",BREAK:"break",LONG_BREAK:"longbreak",ACTIVE:"active",COMPLETE:"complete"},l=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.id=e,this.allTasks=[],this.mode=c.INACTIVE,this.time=0,this.pomosElapsed=0,this.startDate=new Date}var e,n;return e=t,(n=[{key:"currentTask",value:function(){var t=this.allTasks.filter((function(t){return!t.completed}));return t.length>0?t[0]:null}},{key:"addTask",value:function(t){(0,o.rs)(t),this.allTasks.push(t)}},{key:"deleteTask",value:function(t){(0,o.c_)(t.id);for(var e=0;e<this.allTasks.length;e++){var n=this.allTasks[e];if(t.id===n.id)return void this.allTasks.splice(e,1)}}},{key:"completeTask",value:function(t){var e,n=i(this.allTasks);try{for(n.s();!(e=n.n()).done;){var r=e.value;if(r.id===t)return r.completed=!0,!0}}catch(t){n.e(t)}finally{n.f()}return!1}},{key:"getNextTask",value:function(){var t,e=i(this.allTasks);try{for(e.s();!(t=e.n()).done;){var n=t.value;if(!1===n.completed)return n}}catch(t){e.e(t)}finally{e.f()}return null}},{key:"incrementTaskPomosUsed",value:function(t){var e,n=i(this.allTasks);try{for(n.s();!(e=n.n()).done;){var r=e.value;if(r.id===t)return r.pomosUsed+=1,void(this.pomosElapsed+=1)}}catch(t){n.e(t)}finally{n.f()}}},{key:"isBreak",value:function(){return this.mode===c.LONG_BREAK||this.mode===c.BREAK}},{key:"reorderTasks",value:function(){}},{key:"getPomosLeftInSession",value:function(){var t=0;return this.allTasks.forEach((function(e){t+=Math.max(e.pomosRequired-e.pomosUsed,0)})),t}},{key:"parseSessionFromObj",value:function(t){return this.id=t.id,this.mode=t.mode,this.time=t.time,this.pomosElapsed=t.pomosElapsed,this.startDate=new Date(t.startDate),this.allTasks=t.allTasks.map((function(t){var e=new o.iQ;return e.parseTaskFromObj(t)})),this}},{key:"serializeIntoObj",value:function(){return{id:this.id,allTasks:this.allTasks.map((function(t){return t.serializeIntoObj()})),mode:this.mode,time:this.time,pomosElapsed:this.pomosElapsed,startDate:this.startDate.getTime()}}}])&&a(e.prototype,n),t}();function p(t){var e=(0,r.RK)(u),n=new l;return e[t]?n.parseSessionFromObj(e[t]):null}function f(t){var e=(0,r.RK)(u);e[t.id]=t.serializeIntoObj(),(0,r.RL)(u,e)}function d(){return"complete"===localStorage.getItem("latest_pomo_session_status")?null:parseInt(localStorage.getItem("pomo_session_id"))-1}},594:(t,e,n)=>{"use strict";n.d(e,{iQ:()=>i,rs:()=>u,c_:()=>c});var r=n(409);function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n(771);var i=function(){function t(e,n,r,o){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.sessionID=e,this.id=-1,this.title=n,this.description=r,this.pomosRequired=o,this.completed=!1,this.pomosUsed=0}var e,n;return e=t,(n=[{key:"parseTaskFromObj",value:function(e){var n=new t(e.sessionID,e.title,e.description,e.pomosRequired);return n.completed=e.completed,n.id=e.id,n.pomosUsed=e.pomosUsed,n}},{key:"serializeIntoObj",value:function(){return{title:this.title,description:this.description,pomosRequired:this.pomosRequired,completed:this.completed,pomosUsed:this.pomosUsed,id:this.id,sessionID:this.sessionID}}}])&&o(e.prototype,n),t}(),s="pomo_task_map",a="pomo_task_index";function u(t){var e=(0,r.RK)(s);if(!e[t.id]){var n=parseInt((0,r.RK)(a));t.id=n,(0,r.RL)(a,n+1)}var o=t.serializeIntoObj();return e[t.id]=o,(0,r.RL)(s,e),t.id}function c(t){var e=(0,r.RK)(s);delete e[t],(0,r.RL)(s,e)}}},e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t="day",e="night";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function i(t){var e="function"==typeof Map?new Map:void 0;return(i=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf("[native code]")))return t;var n;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return s(t,arguments,c(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),u(r,t)})(t)}function s(t,e,n){return(s=a()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var o=new(Function.bind.apply(t,r));return n&&u(o,n.prototype),o}).apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function u(t,e){return(u=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function c(t){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var l=function(n){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&u(t,e)}(l,n);var r,i,s=(r=l,i=a(),function(){var t,e=c(r);if(i){var n=c(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return o(this,t)});function l(){var n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,l),(n=s.call(this)).elements={},n.attachShadow({mode:"open"});var r=document.createElement("button");r.setAttribute("class","pomo-button"),r.innerText=n.textContent||"",n.elements.button=r,r.setAttribute("part","button"),r.style.display="none";var o=document.createElement("link");return o.setAttribute("rel","stylesheet"),o.setAttribute("href","./assets/styles/button.css"),n.elements.linkElem=o,n.shadowRoot.append(o,r),n.type=n.getAttribute("type"),"outline"==n.type?n.elements.button.setAttribute("class",n.elements.button.getAttribute("class")+" outline"):"nav"==n.type&&n.elements.button.setAttribute("class",n.elements.button.getAttribute("class")+" nav"),n.size=n.getAttribute("size"),"small"===n.size?n.elements.button.setAttribute("class",n.elements.button.getAttribute("class")+" small"):"tiny"===n.size&&n.elements.button.setAttribute("class",n.elements.button.getAttribute("class")+" tiny"),function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date,r=t;return n.getHours()<4?r=e:n.getHours()<18?r=t:n.getHours()<24&&(r=e),r}()===e&&"true"!==n.getAttribute("nodark")&&n.elements.button.setAttribute("class",n.elements.button.getAttribute("class")+" dark"),n}return l}(i(HTMLElement));function p(t){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function f(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function d(t,e){return!e||"object"!==p(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function m(t){var e="function"==typeof Map?new Map:void 0;return(m=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf("[native code]")))return t;var n;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return y(t,arguments,v(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),b(r,t)})(t)}function y(t,e,n){return(y=h()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var o=new(Function.bind.apply(t,r));return n&&b(o,n.prototype),o}).apply(null,arguments)}function h(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function b(t,e){return(b=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function v(t){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}customElements.define("pomo-button",l);var w=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&b(t,e)}(s,t);var e,n,r,o,i=(e=s,n=h(),function(){var t,r=v(e);if(n){var o=v(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return d(this,t)});function s(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,s),(t=i.call(this)).elements={},t.attachShadow({mode:"open"});var e=document.createElement("div");t.elements.wrapper=e,t.elements.wrapper.setAttribute("class","modal-wrapper"),t.elements.wrapper.innerHTML='<div class="shadow"></div><div class="modal"></div>';var n=document.createElement("link");return n.setAttribute("rel","stylesheet"),n.setAttribute("href","./assets/styles/modal.css"),t.elements.linkElem=n,t.elements.wrapper.style.display="none",t.shadowRoot.appendChild(n),t}return r=s,(o=[{key:"displayModal",value:function(){var t=this;this.elements.wrapper.style.display="block",setTimeout((function(){t.elements.wrapper.style.opacity=1}),20)}},{key:"hideModal",value:function(){var t=this;this.elements.wrapper.style.opacity=0,setTimeout((function(){t.elements.wrapper.style.display="none"}),400)}},{key:"connectedCallback",value:function(){this.type=this.getAttribute("type");var t=this.childNodes,e="";t.forEach((function(t){t.nodeType!=Node.TEXT_NODE&&(e+=t.outerHTML)})),this.elements.wrapper.innerHTML='<div class="shadow"></div><div class="modal">'.concat(e,"</div>");for(var n=t.length,r=0;r<n;r++)this.removeChild(t[0]);this.shadowRoot.appendChild(this.elements.wrapper)}}])&&f(r.prototype,o),s}(m(HTMLElement));customElements.define("pomo-modal",w),n(223);var g=n(771);function k(t){return(k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function E(t,e){return!e||"object"!==k(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function T(t){var e="function"==typeof Map?new Map:void 0;return(T=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf("[native code]")))return t;var n;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return O(t,arguments,S(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),R(r,t)})(t)}function O(t,e,n){return(O=A()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var o=new(Function.bind.apply(t,r));return n&&R(o,n.prototype),o}).apply(null,arguments)}function A(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function R(t,e){return(R=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function S(t){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var _=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&R(t,e)}(o,t);var e,n,r=(e=o,n=A(),function(){var t,r=S(e);if(n){var o=S(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return E(this,t)});function o(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(t=r.call(this)).elements={},t.attachShadow({mode:"open"});var e=document.createElement("nav");e.setAttribute("class","pomo-header");var n=document.createElement("img");n.src="./assets/svgImages/logo.svg",n.setAttribute("class","pomo-header logo");var i=document.createElement("a");i.href="index.html",i.id="home-btn",i.appendChild(n),e.appendChild(i),e.innerHTML+='<a id="hist-btn" href="history.html"><pomo-button type="nav" id="hist">History</pomo-button></a>',e.innerHTML+='<pomo-button type="nav" id="help">Help</pomo-button>',e.innerHTML+='<pomo-modal id="modal-help">  \n            <button id="modal-close" class="close-btn">x</button>\n            <p class="title">What\'s a Pomo Timer?</p>\n            <p>'.concat("The Pomodoro Technique is a time management method developed by Francesco Cirillo in the late 1980s. The technique uses a timer to break down work into intervals, traditionally 25 minutes in length, separated by short breaks. Each interval is known as a pomodoro, from the Italian word for 'tomato', after the tomato-shaped kitchen timer that Cirillo used as a university student.",'</p>\n            <a href="https://en.wikipedia.org/wiki/Pomodoro_Technique">Wikipedia</a>\n        </pomo-modal>'),t.elements.wrapper=e;var s=document.createElement("link");s.setAttribute("rel","stylesheet"),s.setAttribute("href","./assets/styles/header.css"),t.elements.linkElem=s,t.shadowRoot.append(s,e);var a=e.childNodes[3];a.elements.wrapper.style.display="none";var u=e.childNodes[2],c=a.shadowRoot.getElementById("modal-close");u.onclick=function(){a.displayModal()},c.onclick=function(){a.hideModal()};var l=function(t){var e=(0,g.RU)();if(null!==e){var n=(0,g._c)(e);n.mode!==g.rA.ACTIVE&&n.mode!==g.rA.LONG_BREAK&&n.mode!==g.rA.BREAK||(confirm("Are you sure want to leave? This will automatically complete your session")?(console.log("CHANGE"),n.mode=g.rA.COMPLETE,(0,g.E3)(n),console.log((0,g._c)(n.id))):t.preventDefault())}};return t.shadowRoot.getElementById("hist-btn").onclick=l,t.shadowRoot.getElementById("home-btn").onclick=l,t}return o}(T(HTMLElement));customElements.define("pomo-header",_),n(614),n(870),n(907)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,