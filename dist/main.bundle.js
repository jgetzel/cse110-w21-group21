(()=>{"use strict";var e={409:(e,t,n)=>{n.d(t,{xN:()=>a,RL:()=>i,RK:()=>s});var r=n(594),o=n(771);function a(){var e=!1;null===s(r.Rd)&&(e=!0),null===s(r.oi)&&(e=!0),null===!localStorage.getItem(o.Do)&&(e=!0),null===!localStorage.getItem(o.mn)&&(e=!0),null===s(o.XB)&&(e=!0),e&&(i(r.Rd,{}),i(r.oi,0),i(o.mn,"complete"),i(o.Do,0),i(o.XB,{}))}function i(e,t){localStorage.setItem(e,JSON.stringify(t))}function s(e){return JSON.parse(localStorage.getItem(e))}},771:(e,t,n)=>{n.d(t,{Do:()=>l,mn:()=>u,XB:()=>c,_c:()=>m,RU:()=>p,iF:()=>v});var r=n(409),o=n(594);function a(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,s=!0,l=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return s=e.done,e},e:function(e){l=!0,a=e},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw a}}}}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l="pomo_session_id",u="latest_pomo_session_status",c="pomo_session_map",d="inactive",f=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id=t,this.allTasks=[],this.mode=d,this.time=0,this.pomosElapsed=0,this.startDate=new Date}var t,n;return t=e,(n=[{key:"currentTask",value:function(){var e=this.allTasks.filter((function(e){return!e.completed}));return e.length>0?e[0]:null}},{key:"addTask",value:function(e){(0,o.rs)(e),this.allTasks.push(e)}},{key:"deleteTask",value:function(e){(0,o.c_)(e.id);for(var t=0;t<this.allTasks.length;t++){var n=this.allTasks[t];if(e.id===n.id)return void this.allTasks.splice(t,1)}}},{key:"completeTask",value:function(e){var t,n=a(this.allTasks);try{for(n.s();!(t=n.n()).done;){var r=t.value;if(r.id===e)return r.completed=!0,!0}}catch(e){n.e(e)}finally{n.f()}return!1}},{key:"getNextTask",value:function(){var e,t=a(this.allTasks);try{for(t.s();!(e=t.n()).done;){var n=e.value;if(!1===n.completed)return n}}catch(e){t.e(e)}finally{t.f()}return null}},{key:"incrementTaskPomosUsed",value:function(e){var t,n=a(this.allTasks);try{for(n.s();!(t=n.n()).done;){var r=t.value;if(r.id===e)return r.pomosUsed+=1,void(this.pomosElapsed+=1)}}catch(e){n.e(e)}finally{n.f()}}},{key:"isBreak",value:function(){return"longbreak"===this.mode||"break"===this.mode}},{key:"reorderTasks",value:function(){}},{key:"getPomosLeftInSession",value:function(){var e=0;return this.allTasks.forEach((function(t){e+=Math.max(t.pomosRequired-t.pomosUsed,0)})),e}},{key:"parseSessionFromObj",value:function(e){return this.id=e.id,this.mode=e.mode,this.time=e.time,this.pomosElapsed=e.pomosElapsed,this.startDate=new Date(e.startDate),this.allTasks=e.allTasks.map((function(e){var t=new o.iQ;return t.parseTaskFromObj(e)})),this}},{key:"serializeIntoObj",value:function(){return{id:this.id,allTasks:this.allTasks.map((function(e){return e.serializeIntoObj()})),mode:this.mode,time:this.time,pomosElapsed:this.pomosElapsed,startDate:this.startDate.getTime()}}}])&&s(t.prototype,n),e}();function m(e){var t=(0,r.RK)(c),n=new f;return t[e]?n.parseSessionFromObj(t[e]):null}function p(){return"complete"===localStorage.getItem(u)?null:parseInt(localStorage.getItem(l))-1}function v(){(function(){var e=p();if(null===e)return!1;var t=m(e);return null!==t&&"complete"!==t.mode&&t.mode!==d})()&&(window.location="/timer.html?loadSaved=true")}},594:(e,t,n)=>{n.d(t,{iQ:()=>i,Rd:()=>s,oi:()=>l,rs:()=>u,c_:()=>c,zT:()=>d});var r=n(409),o=n(771);function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t,n,r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sessionID=t,this.id=-1,this.title=n,this.description=r,this.pomosRequired=o,this.completed=!1,this.pomosUsed=0}var t,n;return t=e,(n=[{key:"parseTaskFromObj",value:function(t){var n=new e(t.sessionID,t.title,t.description,t.pomosRequired);return n.completed=t.completed,n.id=t.id,n.pomosUsed=t.pomosUsed,n}},{key:"serializeIntoObj",value:function(){return{title:this.title,description:this.description,pomosRequired:this.pomosRequired,completed:this.completed,pomosUsed:this.pomosUsed,id:this.id,sessionID:this.sessionID}}}])&&a(t.prototype,n),e}(),s="pomo_task_map",l="pomo_task_index";function u(e){var t=(0,r.RK)(s);if(!t[e.id]){var n=parseInt((0,r.RK)(l));e.id=n,(0,r.RL)(l,n+1)}var o=e.serializeIntoObj();return t[e.id]=o,(0,r.RL)(s,t),e.id}function c(e){var t=(0,r.RK)(s);delete t[e],(0,r.RL)(s,t)}function d(){var e=(0,o.RU)();if(null===e)return!1;var t=(0,o._c)(e);return null!==t&&null!==t.currentTask()}}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(409),t=n(771),r=n(594),o="day",a="night";function i(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date,t=o;return e.getHours()<4?t=a:e.getHours()<18?t=o:e.getHours()<24&&(t=a),t}window.addEventListener("DOMContentLoaded",(function(){(0,e.xN)(),(0,t.iF)(),function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date,t=0,n=6,r=e.getDay(),o=localStorage.getItem("bg-seed");null!==o&&o[0]==r||(o=r+"-"+Math.floor(Math.random()*n),localStorage.setItem("bg-seed",o));var a=i(e);t=parseInt(o[2]),document.getElementById("backdrop").style.backgroundImage='url("../assets/images/backgrounds/'.concat(a,"/bg").concat(t,'.jpg")')}(),(0,r.zT)()||(console.log(document.getElementById("leftover-tasks-wrapper")),document.getElementById("leftover-tasks-wrapper").style.display="none")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,