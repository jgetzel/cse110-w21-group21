(()=>{"use strict";var e={409:(e,t,o)=>{o.d(t,{xN:()=>r,RK:()=>l});var s=o(594),a=o(771);function r(){var e=!1;null===l(s.Rd)&&(e=!0),null===l(s.oi)&&(e=!0),null===!localStorage.getItem(a.Do)&&(e=!0),null===!localStorage.getItem(a.mn)&&(e=!0),null===l(a.XB)&&(e=!0),e&&(n(s.Rd,{}),n(s.oi,0),n(a.mn,"complete"),n(a.Do,0),n(a.XB,{}))}function n(e,t){localStorage.setItem(e,JSON.stringify(t))}function l(e){return JSON.parse(localStorage.getItem(e))}},771:(e,t,o)=>{o.d(t,{Do:()=>s,mn:()=>a,XB:()=>r,RU:()=>n}),o(409),o(594);var s="pomo_session_id",a="latest_pomo_session_status",r="pomo_session_map";function n(){return"complete"===localStorage.getItem(a)?null:parseInt(localStorage.getItem(s))-1}},594:(e,t,o)=>{o.d(t,{Rd:()=>s,oi:()=>a}),o(409),o(771);var s="pomo_task_map",a="pomo_task_index"}},t={};function o(s){if(t[s])return t[s].exports;var a=t[s]={exports:{}};return e[s](a,a.exports,o),a.exports}o.d=(e,t)=>{for(var s in t)o.o(t,s)&&!o.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=o(409),t=o(771),s=function o(s){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),this.date=s,this.tasks={},this.greenTasks=0,this.yellowTasks=0,this.redTasks=0;for(var r=(0,t.RU)(),n=0;0!=r;){var l=new Date((0,e.RK)(t.XB)[r].startDate);if(this.date.getMonth()===l.getMonth()&&this.date.getDate()===l.getDate()&&this.date.getYear()===l.getYear())Object.keys((0,e.RK)(t.XB)[r].allTasks).forEach((function(o){return a.tasks[n++]=(0,e.RK)(t.XB)[r].allTasks[o]}));else if(this.date.getMonth()>l.getMonth()||this.date.getDate()>l.getDate()||this.date.getYear()>l.getYear())break;r-=1}for(var d in this.tasks)this.tasks[d].completed?this.tasks[d].pomosUsed<=this.tasks[d].pomosRequired?this.greenTasks+=1:this.yellowTasks+=1:this.redTasks+=1},a="day",r="night";function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date,t=a;return e.getHours()<4?t=r:e.getHours()<18?t=a:e.getHours()<24&&(t=r),t}window.addEventListener("DOMContentLoaded",(function(){!function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date,t=0,o=6,s=e.getDay(),a=localStorage.getItem("bg-seed");null!==a&&a[0]==s||(a=s+"-"+Math.floor(Math.random()*o),localStorage.setItem("bg-seed",a));var r=n(e);t=parseInt(a[2]),document.getElementById("backdrop").style.backgroundImage='url("../assets/images/backgrounds/'.concat(r,"/bg").concat(t,'.jpg")')}(),(0,e.xN)();var t=new s(new Date),o=document.getElementById("taskList");for(var a in t.tasks){var r=t.tasks[a],l='<pomo-task description ="'.concat(r.description,'" pomosUsed="').concat(r.pomosUsed,'", pomosRequired ="').concat(r.pomosRequired,'">').concat(r.title,"</pomo-task>");o.insertAdjacentHTML("beforeend",l);var d=o.childNodes[o.childNodes.length-1];d.task=r,d.shadowRoot.childNodes[0].childNodes[0].childNodes[3].style.display="none",d.shadowRoot.childNodes[0].childNodes[0].childNodes[2].style.display="none",r.completed?r.pomosUsed<=r.pomosRequired?d.shadowRoot.childNodes[0].childNodes[0].childNodes[1].childNodes[0].setAttribute("class","goodTimingTask"):d.shadowRoot.childNodes[0].childNodes[0].childNodes[1].childNodes[0].setAttribute("class","badTimingTask"):d.shadowRoot.childNodes[0].childNodes[0].childNodes[1].childNodes[0].setAttribute("class","incompleteTask")}var i={complete:t.greenTasks,overtime:t.yellowTasks,incomplete:t.redTasks};!function(e,t){var o=e.getContext("2d"),s=["#22DD9A","#F9C644","#FA7F7F"];new Chart(o,{type:"bar",data:{labels:["Tasks Completed on Time","Tasks Completed over Time","Tasks Incomplete"],datasets:[{label:"# of Tasks",data:[t.complete,t.overtime,t.incomplete],backgroundColor:s,borderColor:s,borderWidth:1}]},options:{legend:!1,scales:{yAxes:[{ticks:{beginAtZero:!0}}]}}})}(document.getElementById("efficiency-chart"),i);var c=document.getElementById("efficiency-weekly-chart"),h=function(){for(var e=[],t=0;t<7;t++){var o=new Date;o.setDate(o.getDate()-t),e.push(o)}return e}();h.reverse();var m=[],g=[];for(var p in h)m.push(new Date(h[p]).getMonth()+"/"+new Date(h[p]).getDate()),g.push(new s(new Date(h[p])));var u,k,v,f,b=[],T=[],y=[];for(var w in g)console.log(g[w]),b.push(g[w].greenTasks),T.push(g[w].yellowTasks),y.push(g[w].redTasks);u={complete:b,overtime:T,incomplete:y},k=m,v=c.getContext("2d"),f=["Tasks Completed on Time","Tasks Completed over Time","Tasks Incomplete"],new Chart(v,{type:"line",data:{labels:k,datasets:[{label:f[0],borderColor:"#22DD9A",backgroundColor:"transparent",data:u.complete},{label:f[1],borderColor:"#F9C644",backgroundColor:"transparent",data:u.overtime},{label:f[2],borderColor:"#FA7F7F",backgroundColor:"transparent",data:u.incomplete}]},options:{scales:{yAxes:[{ticks:{beginAtZero:!0}}]}}})}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,