(()=>{"use strict";var e={409:(e,t,o)=>{o.d(t,{xN:()=>r,RL:()=>n,RK:()=>i});var s=o(594),a=o(771);function r(){var e=!1;null===i(s.Rd)&&(e=!0),null===i(s.oi)&&(e=!0),null===!localStorage.getItem(a.Do)&&(e=!0),null===!localStorage.getItem(a.mn)&&(e=!0),null===i(a.XB)&&(e=!0),e&&(n(s.Rd,{}),n(s.oi,0),n(a.mn,"complete"),n(a.Do,0),n(a.XB,{}))}function n(e,t){localStorage.setItem(e,JSON.stringify(t))}function i(e){return JSON.parse(localStorage.getItem(e))}},771:(e,t,o)=>{o.d(t,{Do:()=>l,mn:()=>d,XB:()=>c,rA:()=>u,_c:()=>h,RU:()=>p});var s=o(409),a=o(594);function r(e,t){var o;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(o=function(e,t){if(e){if("string"==typeof e)return n(e,t);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?n(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){o&&(e=o);var s=0,a=function(){};return{s:a,n:function(){return s>=e.length?{done:!0}:{done:!1,value:e[s++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,i=!0,l=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){l=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(l)throw r}}}}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var o=0,s=new Array(t);o<t;o++)s[o]=e[o];return s}function i(e,t){for(var o=0;o<t.length;o++){var s=t[o];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}var l="pomo_session_id",d="latest_pomo_session_status",c="pomo_session_map",u={INACTIVE:"inactive",BREAK:"break",LONG_BREAK:"longbreak",ACTIVE:"active",COMPLETE:"complete"},m=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id=t,this.allTasks=[],this.mode=u.INACTIVE,this.time=0,this.pomosElapsed=0,this.startDate=new Date}var t,o;return t=e,(o=[{key:"currentTask",value:function(){var e=this.allTasks.filter((function(e){return!e.completed}));return e.length>0?e[0]:null}},{key:"addTask",value:function(e){(0,a.rs)(e),this.allTasks.push(e)}},{key:"deleteTask",value:function(e){(0,a.c_)(e.id);for(var t=0;t<this.allTasks.length;t++){var o=this.allTasks[t];if(e.id===o.id)return void this.allTasks.splice(t,1)}}},{key:"completeTask",value:function(e){var t,o=r(this.allTasks);try{for(o.s();!(t=o.n()).done;){var s=t.value;if(s.id===e)return s.completed=!0,!0}}catch(e){o.e(e)}finally{o.f()}return!1}},{key:"getNextTask",value:function(){var e,t=r(this.allTasks);try{for(t.s();!(e=t.n()).done;){var o=e.value;if(!1===o.completed)return o}}catch(e){t.e(e)}finally{t.f()}return null}},{key:"incrementTaskPomosUsed",value:function(e){var t,o=r(this.allTasks);try{for(o.s();!(t=o.n()).done;){var s=t.value;if(s.id===e)return s.pomosUsed+=1,void(this.pomosElapsed+=1)}}catch(e){o.e(e)}finally{o.f()}}},{key:"isBreak",value:function(){return this.mode===u.LONG_BREAK||this.mode===u.BREAK}},{key:"reorderTasks",value:function(){}},{key:"getPomosLeftInSession",value:function(){var e=0;return this.allTasks.forEach((function(t){e+=Math.max(t.pomosRequired-t.pomosUsed,0)})),e}},{key:"parseSessionFromObj",value:function(e){return this.id=e.id,this.mode=e.mode,this.time=e.time,this.pomosElapsed=e.pomosElapsed,this.startDate=new Date(e.startDate),this.allTasks=e.allTasks.map((function(e){var t=new a.iQ;return t.parseTaskFromObj(e)})),this}},{key:"serializeIntoObj",value:function(){return{id:this.id,allTasks:this.allTasks.map((function(e){return e.serializeIntoObj()})),mode:this.mode,time:this.time,pomosElapsed:this.pomosElapsed,startDate:this.startDate.getTime()}}}])&&i(t.prototype,o),e}();function h(e){var t=(0,s.RK)(c),o=new m;return t[e]?o.parseSessionFromObj(t[e]):null}function p(){return"complete"===localStorage.getItem(d)?null:parseInt(localStorage.getItem(l))-1}},594:(e,t,o)=>{o.d(t,{iQ:()=>r,Rd:()=>n,oi:()=>i,rs:()=>l,c_:()=>d});var s=o(409);function a(e,t){for(var o=0;o<t.length;o++){var s=t[o];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}o(771);var r=function(){function e(t,o,s,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sessionID=t,this.id=-1,this.title=o,this.description=s,this.pomosRequired=a,this.completed=!1,this.pomosUsed=0}var t,o;return t=e,(o=[{key:"parseTaskFromObj",value:function(t){var o=new e(t.sessionID,t.title,t.description,t.pomosRequired);return o.completed=t.completed,o.id=t.id,o.pomosUsed=t.pomosUsed,o}},{key:"serializeIntoObj",value:function(){return{title:this.title,description:this.description,pomosRequired:this.pomosRequired,completed:this.completed,pomosUsed:this.pomosUsed,id:this.id,sessionID:this.sessionID}}}])&&a(t.prototype,o),e}(),n="pomo_task_map",i="pomo_task_index";function l(e){var t=(0,s.RK)(n);if(!t[e.id]){var o=parseInt((0,s.RK)(i));e.id=o,(0,s.RL)(i,o+1)}var a=e.serializeIntoObj();return t[e.id]=a,(0,s.RL)(n,t),e.id}function d(e){var t=(0,s.RK)(n);delete t[e],(0,s.RL)(n,t)}}},t={};function o(s){if(t[s])return t[s].exports;var a=t[s]={exports:{}};return e[s](a,a.exports,o),a.exports}o.d=(e,t)=>{for(var s in t)o.o(t,s)&&!o.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=o(409),t=o(771),s=function e(o){var s=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.date=o,this.tasks={},this.greenTasks=0,this.yellowTasks=0,this.redTasks=0;for(var a=(0,t.RU)(),r=0,n=function(){var e=(0,t._c)(a);if(e.mode!==t.rA.COMPLETE)return a-=1,"continue";var o=e.startDate;if(s.date.getMonth()===o.getMonth()&&s.date.getDate()===o.getDate()&&s.date.getYear()===o.getYear())Object.keys(e.allTasks).forEach((function(t){return s.tasks[r++]=e.allTasks[t]}));else if(s.date.getMonth()>o.getMonth()||s.date.getDate()>o.getDate()||s.date.getYear()>o.getYear())return"break";a-=1};0!=a;){var i=n();if("continue"!==i&&"break"===i)break}for(var l in this.tasks)this.tasks[l].completed?this.tasks[l].pomosUsed<=this.tasks[l].pomosRequired?this.greenTasks+=1:this.yellowTasks+=1:this.redTasks+=1},a="day",r="night";function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date,t=a;return e.getHours()<4?t=r:e.getHours()<18?t=a:e.getHours()<24&&(t=r),t}window.addEventListener("DOMContentLoaded",(function(){!function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date,t=0,o=6,s=e.getDay(),a=localStorage.getItem("bg-seed");null!==a&&a[0]==s||(a=s+"-"+Math.floor(Math.random()*o),localStorage.setItem("bg-seed",a));var r=n(e);t=parseInt(a[2]),document.getElementById("backdrop").style.backgroundImage='url("../assets/images/backgrounds/'.concat(r,"/bg").concat(t,'.jpg")')}(),(0,e.xN)();var t=new s(new Date),o=document.getElementById("taskList");for(var a in t.tasks){var r=t.tasks[a],i='<pomo-task description ="'.concat(r.description,'" pomosUsed="').concat(r.pomosUsed,'", pomosRequired ="').concat(r.pomosRequired,'">').concat(r.title,"</pomo-task>");o.insertAdjacentHTML("beforeend",i);var l=o.childNodes[o.childNodes.length-1];l.task=r,l.shadowRoot.childNodes[0].childNodes[0].childNodes[3].style.display="none",l.shadowRoot.childNodes[0].childNodes[0].childNodes[2].style.display="none",r.completed?r.pomosUsed<=r.pomosRequired?l.shadowRoot.childNodes[0].childNodes[0].childNodes[1].childNodes[0].setAttribute("class","goodTimingTask"):l.shadowRoot.childNodes[0].childNodes[0].childNodes[1].childNodes[0].setAttribute("class","badTimingTask"):l.shadowRoot.childNodes[0].childNodes[0].childNodes[1].childNodes[0].setAttribute("class","incompleteTask")}var d={complete:t.greenTasks,overtime:t.yellowTasks,incomplete:t.redTasks};!function(e,t){var o=e.getContext("2d"),s=["#22DD9A","#F9C644","#FA7F7F"];new Chart(o,{type:"bar",data:{labels:["Tasks Completed on Time","Tasks Completed over Time","Tasks Incomplete"],datasets:[{label:"# of Tasks",data:[t.complete,t.overtime,t.incomplete],backgroundColor:s,borderColor:s,borderWidth:1}]},options:{legend:!1,scales:{yAxes:[{ticks:{beginAtZero:!0}}]}}})}(document.getElementById("efficiency-chart"),d);var c=document.getElementById("efficiency-weekly-chart"),u=function(){for(var e=[],t=0;t<7;t++){var o=new Date;o.setDate(o.getDate()-t),e.push(o)}return e}();u.reverse();var m=[],h=[];for(var p in u)m.push(u[p].getMonth()+1+"/"+new Date(u[p]).getDate()),h.push(new s(new Date(u[p])));var f,v,k,g,y=[],b=[],T=[];for(var w in h)y.push(h[w].greenTasks),b.push(h[w].yellowTasks),T.push(h[w].redTasks);f={complete:y,overtime:b,incomplete:T},v=m,k=c.getContext("2d"),g=["Tasks Completed on Time","Tasks Completed over Time","Tasks Incomplete"],new Chart(k,{type:"line",data:{labels:v,datasets:[{label:g[0],borderColor:"#22DD9A",backgroundColor:"transparent",data:f.complete},{label:g[1],borderColor:"#F9C644",backgroundColor:"transparent",data:f.overtime},{label:g[2],borderColor:"#FA7F7F",backgroundColor:"transparent",data:f.incomplete}]},options:{scales:{yAxes:[{ticks:{beginAtZero:!0}}]}}})}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,