(()=>{"use strict";var e={409:(e,o,t)=>{t.d(o,{xN:()=>n,RK:()=>l});var s=t(594),a=t(771);function n(){var e=!1;null===l(s.Rd)&&(e=!0),null===l(s.oi)&&(e=!0),null===!localStorage.getItem(a.Do)&&(e=!0),null===!localStorage.getItem(a.mn)&&(e=!0),null===l(a.XB)&&(e=!0),e&&(d(s.Rd,{}),d(s.oi,0),d(a.mn,"complete"),d(a.Do,0),d(a.XB,{}))}function d(e,o){localStorage.setItem(e,JSON.stringify(o))}function l(e){return JSON.parse(localStorage.getItem(e))}},771:(e,o,t)=>{t.d(o,{Do:()=>s,mn:()=>a,XB:()=>n,RU:()=>d}),t(409),t(594);var s="pomo_session_id",a="latest_pomo_session_status",n="pomo_session_map";function d(){return"complete"===localStorage.getItem(a)?null:parseInt(localStorage.getItem(s))-1}},594:(e,o,t)=>{t.d(o,{Rd:()=>s,oi:()=>a}),t(409),t(771);var s="pomo_task_map",a="pomo_task_index"}},o={};function t(s){if(o[s])return o[s].exports;var a=o[s]={exports:{}};return e[s](a,a.exports,t),a.exports}t.d=(e,o)=>{for(var s in o)t.o(o,s)&&!t.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:o[s]})},t.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),(()=>{var e=t(409),o=t(771),s=function t(s){for(var a in function(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}(this,t),this.sessionID=s,this.tasks=(0,e.RK)(o.XB)[s].allTasks,this.greenTasks=0,this.yellowTasks=0,this.redTasks=0,console.log(this.tasks),this.tasks)this.tasks[a].completed?this.tasks[a].pomosUsed<=this.tasks[a].pomosRequired?this.greenTasks+=1:this.yellowTasks+=1:this.redTasks+=1},a="day",n="night";function d(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date,o=a;return e.getHours()<4?o=n:e.getHours()<18?o=a:e.getHours()<24&&(o=n),o}window.addEventListener("DOMContentLoaded",(function(){!function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date,o=0,t=6,s=e.getDay(),a=localStorage.getItem("bg-seed");null!==a&&a[0]==s||(a=s+"-"+Math.floor(Math.random()*t),localStorage.setItem("bg-seed",a));var n=d(e);o=parseInt(a[2]),document.getElementById("backdrop").style.backgroundImage='url("../assets/images/backgrounds/'.concat(n,"/bg").concat(o,'.jpg")')}(),(0,e.xN)();var t=new s((0,o.RU)()),a=document.getElementById("taskList");for(var n in t.tasks){var l=t.tasks[n];console.log(l);var i='<pomo-task description ="'.concat(l.description,'" pomosUsed="').concat(l.pomosUsed,'", pomosRequired ="').concat(l.pomosRequired,'">').concat(l.title,"</pomo-task>");a.insertAdjacentHTML("beforeend",i);var r=a.childNodes[a.childNodes.length-1];r.task=l,r.shadowRoot.childNodes[0].childNodes[0].childNodes[3].style.display="none",r.shadowRoot.childNodes[0].childNodes[0].childNodes[2].style.display="none",l.completed?l.pomosUsed<=l.pomosRequired?r.shadowRoot.childNodes[0].childNodes[0].childNodes[1].childNodes[0].setAttribute("class","goodTimingTask"):r.shadowRoot.childNodes[0].childNodes[0].childNodes[1].childNodes[0].setAttribute("class","badTimingTask"):r.shadowRoot.childNodes[0].childNodes[0].childNodes[1].childNodes[0].setAttribute("class","incompleteTask")}var c={complete:t.greenTasks,overtime:t.yellowTasks,incomplete:t.redTasks};!function(e,o){var t=e.getContext("2d"),s=["#22DD9A","#F9C644","#FA7F7F"];new Chart(t,{type:"bar",data:{labels:["Tasks Completed on Time","Tasks Completed over Time","Tasks Incomplete"],datasets:[{label:"# of Tasks",data:[o.complete,o.overtime,o.incomplete],backgroundColor:s,borderColor:s,borderWidth:1}]},options:{legend:!1,scales:{yAxes:[{ticks:{beginAtZero:!0}}]}}})}(document.getElementById("efficiency-chart"),c)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,